pipeline {
	agent any
	environment {
		PROJECT = 'hello'
		STREAM = 'hello'
		IDIR = 'idir'
	}
	stages {
		stage('build') {
			steps {
synopsys_coverity buildCommand: '', buildStatusForIssues: 'SUCCESS', changeSetExclusionPatterns: '', changeSetInclusionPatterns: '', checkForIssuesInView: true, configureChangeSetPatterns: false, coverityAnalysisType: 'COV_ANALYZE', coverityRunConfiguration: 'ADVANCED', coverityToolName: 'latest', onCommandFailure: 'SKIP_REMAINING_COMMANDS', projectName: 'hello', streamName: 'hello', viewName: 'Outstanding Issues', commands: [[command: 'cov-build --dir ${WORKSPACE}/idir make all']]
			}
		}
		stage('analyze') {
			steps {
synopsys_coverity buildCommand: '', buildStatusForIssues: 'SUCCESS', changeSetExclusionPatterns: '', changeSetInclusionPatterns: '', checkForIssuesInView: true, configureChangeSetPatterns: false, coverityAnalysisType: 'COV_ANALYZE', coverityRunConfiguration: 'ADVANCED', coverityToolName: 'latest', onCommandFailure: 'SKIP_REMAINING_COMMANDS', projectName: 'hello', streamName: 'hello', viewName: 'Outstanding Issues', commands: [[command: 'cov-analyze --dir ${WORKSPACE}/idir --strip-path ${WORKSPACE} --all --enable-callgraph-metrics --enable-fnptr --enable-virtual']]
			}
		}
		stage('commit') {
			steps {
synopsys_coverity buildCommand: '', buildStatusForIssues: 'SUCCESS', changeSetExclusionPatterns: '', changeSetInclusionPatterns: '', checkForIssuesInView: true, configureChangeSetPatterns: false, coverityAnalysisType: 'COV_ANALYZE', coverityRunConfiguration: 'ADVANCED', coverityToolName: 'latest', onCommandFailure: 'SKIP_REMAINING_COMMANDS', projectName: 'hello', streamName: 'hello', viewName: 'Outstanding Issues', commands: [[command: 'cov-commit-defects --dir ${WORKSPACE}/idir --url http://${COVERITY_HOST}:${COVERITY_PORT} --stream ${COV_STREAM} --description ${BUILD_TAG} --target Linux_x86_64']]
			}
		}
	}
	post {
		always {
			deleteDir()
		}
	}
}
